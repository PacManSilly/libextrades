# Generated by Django 4.0.5 on 2022-06-28 10:35

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import investors.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(editable=False, help_text='Database ID', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('email', models.EmailField(error_messages={'unique': 'Investor email address'}, max_length=255, unique=True, verbose_name='Email Address')),
                ('phone', models.CharField(blank=True, help_text='Investor phone number', max_length=50, null=True, verbose_name='Phone Number')),
                ('password', models.CharField(help_text='Investor password', max_length=128, validators=[django.core.validators.MinLengthValidator(limit_value=8), django.core.validators.RegexValidator(inverse_match=True, message='Password cannot contain spaces', regex='\\s')], verbose_name='Password')),
                ('is_verified', models.BooleanField(default=False, help_text='Investor email address is verified', verbose_name='Is Verified')),
                ('kyc_front_view', models.ImageField(help_text='KYC front view', upload_to=investors.models.save_image, verbose_name='KYC Front View')),
                ('kyc_back_view', models.ImageField(help_text='KYC back view', upload_to=investors.models.save_image, verbose_name='KYC Back View')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last Name')),
                ('other_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Other Name')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=7, null=True, verbose_name='Gender')),
                ('mugshot', models.ImageField(upload_to=investors.models.save_image, verbose_name='Mugshot')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('postal', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postal/ZIP')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
